// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
package protocol APIProtocol: Sendable {
    /// OFREP single flag evaluation contract
    ///
    /// OFREP single flag evaluation request.
    /// The endpoint is called by the server providers to perform single flag evaluation.
    ///
    ///
    /// - Remark: HTTP `POST /ofrep/v1/evaluate/flags/{key}`.
    /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/{key}/post`.
    func postOfrepV1EvaluateFlagsKey(_ input: Operations.PostOfrepV1EvaluateFlagsKey.Input) async throws -> Operations.PostOfrepV1EvaluateFlagsKey.Output
    /// OFREP bulk flag evaluation contract
    ///
    /// OFREP bulk evaluation request.
    /// The endpoint is called by the client providers to evaluate all flags at once.
    ///
    ///
    /// - Remark: HTTP `POST /ofrep/v1/evaluate/flags`.
    /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/post`.
    func postOfrepV1EvaluateFlags(_ input: Operations.PostOfrepV1EvaluateFlags.Input) async throws -> Operations.PostOfrepV1EvaluateFlags.Output
    /// OFREP provider configuration
    ///
    /// OFREP configuration is used to supply information about the remote flag management system and to set up the OpenFeature SDK providers.
    /// The providers will contact this endpoint only if the client has opted in.
    ///
    ///
    /// - Remark: HTTP `GET /ofrep/v1/configuration`.
    /// - Remark: Generated from `#/paths//ofrep/v1/configuration/get`.
    func getOfrepV1Configuration(_ input: Operations.GetOfrepV1Configuration.Input) async throws -> Operations.GetOfrepV1Configuration.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// OFREP single flag evaluation contract
    ///
    /// OFREP single flag evaluation request.
    /// The endpoint is called by the server providers to perform single flag evaluation.
    ///
    ///
    /// - Remark: HTTP `POST /ofrep/v1/evaluate/flags/{key}`.
    /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/{key}/post`.
    package func postOfrepV1EvaluateFlagsKey(
        path: Operations.PostOfrepV1EvaluateFlagsKey.Input.Path,
        headers: Operations.PostOfrepV1EvaluateFlagsKey.Input.Headers = .init(),
        body: Operations.PostOfrepV1EvaluateFlagsKey.Input.Body? = nil
    ) async throws -> Operations.PostOfrepV1EvaluateFlagsKey.Output {
        try await postOfrepV1EvaluateFlagsKey(Operations.PostOfrepV1EvaluateFlagsKey.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// OFREP bulk flag evaluation contract
    ///
    /// OFREP bulk evaluation request.
    /// The endpoint is called by the client providers to evaluate all flags at once.
    ///
    ///
    /// - Remark: HTTP `POST /ofrep/v1/evaluate/flags`.
    /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/post`.
    package func postOfrepV1EvaluateFlags(
        headers: Operations.PostOfrepV1EvaluateFlags.Input.Headers = .init(),
        body: Operations.PostOfrepV1EvaluateFlags.Input.Body? = nil
    ) async throws -> Operations.PostOfrepV1EvaluateFlags.Output {
        try await postOfrepV1EvaluateFlags(Operations.PostOfrepV1EvaluateFlags.Input(
            headers: headers,
            body: body
        ))
    }
    /// OFREP provider configuration
    ///
    /// OFREP configuration is used to supply information about the remote flag management system and to set up the OpenFeature SDK providers.
    /// The providers will contact this endpoint only if the client has opted in.
    ///
    ///
    /// - Remark: HTTP `GET /ofrep/v1/configuration`.
    /// - Remark: Generated from `#/paths//ofrep/v1/configuration/get`.
    package func getOfrepV1Configuration(headers: Operations.GetOfrepV1Configuration.Input.Headers = .init()) async throws -> Operations.GetOfrepV1Configuration.Output {
        try await getOfrepV1Configuration(Operations.GetOfrepV1Configuration.Input(headers: headers))
    }
}

/// Server URLs defined in the OpenAPI document.
package enum Servers {
    package enum Server1 {
        package static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "/",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    package static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "/",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
package enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    package enum Schemas {
        /// Evaluate multiple flags in one request
        ///
        /// - Remark: Generated from `#/components/schemas/bulkEvaluationRequest`.
        package struct BulkEvaluationRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/bulkEvaluationRequest/context`.
            package var context: Components.Schemas.Context?
            /// Creates a new `BulkEvaluationRequest`.
            ///
            /// - Parameters:
            ///   - context:
            package init(context: Components.Schemas.Context? = nil) {
                self.context = context
            }
            package enum CodingKeys: String, CodingKey {
                case context
            }
        }
        /// Success response for the bulk evaluation request
        ///
        /// - Remark: Generated from `#/components/schemas/bulkEvaluationSuccess`.
        package struct BulkEvaluationSuccess: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/bulkEvaluationSuccess/FlagsPayload`.
            @frozen package enum FlagsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/bulkEvaluationSuccess/FlagsPayload/case1`.
                case EvaluationSuccess(Components.Schemas.EvaluationSuccess)
                /// - Remark: Generated from `#/components/schemas/bulkEvaluationSuccess/FlagsPayload/case2`.
                case EvaluationFailure(Components.Schemas.EvaluationFailure)
                package init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .EvaluationSuccess(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .EvaluationFailure(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                package func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .EvaluationSuccess(value):
                        try value.encode(to: encoder)
                    case let .EvaluationFailure(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/bulkEvaluationSuccess/flags`.
            package typealias FlagsPayload = [Components.Schemas.BulkEvaluationSuccess.FlagsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/bulkEvaluationSuccess/flags`.
            package var flags: Components.Schemas.BulkEvaluationSuccess.FlagsPayload
            /// Creates a new `BulkEvaluationSuccess`.
            ///
            /// - Parameters:
            ///   - flags:
            package init(flags: Components.Schemas.BulkEvaluationSuccess.FlagsPayload) {
                self.flags = flags
            }
            package enum CodingKeys: String, CodingKey {
                case flags
            }
        }
        /// Bulk evaluation failure response
        ///
        /// - Remark: Generated from `#/components/schemas/bulkEvaluationFailure`.
        package struct BulkEvaluationFailure: Codable, Hashable, Sendable {
            /// An appropriate  code specific to the bulk evaluation error. See https://openfeature.dev/specification/types#error-code
            ///
            /// - Remark: Generated from `#/components/schemas/bulkEvaluationFailure/errorCode`.
            package var errorCode: Swift.String
            /// Optional error details description for logging or other needs
            ///
            /// - Remark: Generated from `#/components/schemas/bulkEvaluationFailure/errorDetails`.
            package var errorDetails: Swift.String?
            /// Creates a new `BulkEvaluationFailure`.
            ///
            /// - Parameters:
            ///   - errorCode: An appropriate  code specific to the bulk evaluation error. See https://openfeature.dev/specification/types#error-code
            ///   - errorDetails: Optional error details description for logging or other needs
            package init(
                errorCode: Swift.String,
                errorDetails: Swift.String? = nil
            ) {
                self.errorCode = errorCode
                self.errorDetails = errorDetails
            }
            package enum CodingKeys: String, CodingKey {
                case errorCode
                case errorDetails
            }
        }
        /// Flag evaluation request
        ///
        /// - Remark: Generated from `#/components/schemas/evaluationRequest`.
        package struct EvaluationRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/evaluationRequest/context`.
            package var context: Components.Schemas.Context?
            /// Creates a new `EvaluationRequest`.
            ///
            /// - Parameters:
            ///   - context:
            package init(context: Components.Schemas.Context? = nil) {
                self.context = context
            }
            package enum CodingKeys: String, CodingKey {
                case context
            }
        }
        /// - Remark: Generated from `#/components/schemas/serverEvaluationSuccess`.
        package struct ServerEvaluationSuccess: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/serverEvaluationSuccess/value1`.
            package var value1: Components.Schemas.EvaluationSuccess
            /// - Remark: Generated from `#/components/schemas/serverEvaluationSuccess/value2`.
            package struct Value2Payload: Codable, Hashable, Sendable {
                /// Let the provider know that this flag evaluation can be cached
                ///
                /// - Remark: Generated from `#/components/schemas/serverEvaluationSuccess/value2/cacheable`.
                package var cacheable: Swift.Bool?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - cacheable: Let the provider know that this flag evaluation can be cached
                package init(cacheable: Swift.Bool? = nil) {
                    self.cacheable = cacheable
                }
                package enum CodingKeys: String, CodingKey {
                    case cacheable
                }
            }
            /// - Remark: Generated from `#/components/schemas/serverEvaluationSuccess/value2`.
            package var value2: Components.Schemas.ServerEvaluationSuccess.Value2Payload
            /// Creates a new `ServerEvaluationSuccess`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            package init(
                value1: Components.Schemas.EvaluationSuccess,
                value2: Components.Schemas.ServerEvaluationSuccess.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            package init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            package func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// Flag evaluation success response.
        ///
        /// - Remark: Generated from `#/components/schemas/evaluationSuccess`.
        package struct EvaluationSuccess: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/evaluationSuccess/value1`.
            package struct Value1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/evaluationSuccess/value1/key`.
                package var key: Components.Schemas.Key?
                /// An OpenFeature reason for the evaluation
                ///
                /// - Remark: Generated from `#/components/schemas/evaluationSuccess/value1/reason`.
                package var reason: Swift.String?
                /// Variant of the evaluated flag value
                ///
                /// - Remark: Generated from `#/components/schemas/evaluationSuccess/value1/variant`.
                package var variant: Swift.String?
                /// Arbitrary metadata supporting flag evaluation
                ///
                /// - Remark: Generated from `#/components/schemas/evaluationSuccess/value1/metadata`.
                package struct MetadataPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/evaluationSuccess/value1/metadata/additionalProperties`.
                    @frozen package enum AdditionalPropertiesPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/evaluationSuccess/value1/metadata/additionalProperties/case1`.
                        case case1(Swift.Bool)
                        /// - Remark: Generated from `#/components/schemas/evaluationSuccess/value1/metadata/additionalProperties/case2`.
                        case case2(Swift.String)
                        /// - Remark: Generated from `#/components/schemas/evaluationSuccess/value1/metadata/additionalProperties/case3`.
                        case case3(Swift.Double)
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case3(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case3(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// A container of undocumented properties.
                    package var additionalProperties: [String: Components.Schemas.EvaluationSuccess.Value1Payload.MetadataPayload.AdditionalPropertiesPayload]
                    /// Creates a new `MetadataPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    package init(additionalProperties: [String: Components.Schemas.EvaluationSuccess.Value1Payload.MetadataPayload.AdditionalPropertiesPayload] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    package init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    package func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// Arbitrary metadata supporting flag evaluation
                ///
                /// - Remark: Generated from `#/components/schemas/evaluationSuccess/value1/metadata`.
                package var metadata: Components.Schemas.EvaluationSuccess.Value1Payload.MetadataPayload?
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - key:
                ///   - reason: An OpenFeature reason for the evaluation
                ///   - variant: Variant of the evaluated flag value
                ///   - metadata: Arbitrary metadata supporting flag evaluation
                package init(
                    key: Components.Schemas.Key? = nil,
                    reason: Swift.String? = nil,
                    variant: Swift.String? = nil,
                    metadata: Components.Schemas.EvaluationSuccess.Value1Payload.MetadataPayload? = nil
                ) {
                    self.key = key
                    self.reason = reason
                    self.variant = variant
                    self.metadata = metadata
                }
                package enum CodingKeys: String, CodingKey {
                    case key
                    case reason
                    case variant
                    case metadata
                }
            }
            /// - Remark: Generated from `#/components/schemas/evaluationSuccess/value1`.
            package var value1: Components.Schemas.EvaluationSuccess.Value1Payload
            /// - Remark: Generated from `#/components/schemas/evaluationSuccess/value2`.
            @frozen package enum Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/evaluationSuccess/value2/case1`.
                case BooleanFlag(Components.Schemas.BooleanFlag)
                /// - Remark: Generated from `#/components/schemas/evaluationSuccess/value2/case2`.
                case StringFlag(Components.Schemas.StringFlag)
                /// - Remark: Generated from `#/components/schemas/evaluationSuccess/value2/case3`.
                case IntegerFlag(Components.Schemas.IntegerFlag)
                /// - Remark: Generated from `#/components/schemas/evaluationSuccess/value2/case4`.
                case FloatFlag(Components.Schemas.FloatFlag)
                /// - Remark: Generated from `#/components/schemas/evaluationSuccess/value2/case5`.
                case ObjectFlag(Components.Schemas.ObjectFlag)
                package init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .BooleanFlag(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .StringFlag(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .IntegerFlag(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .FloatFlag(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .ObjectFlag(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                package func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .BooleanFlag(value):
                        try value.encode(to: encoder)
                    case let .StringFlag(value):
                        try value.encode(to: encoder)
                    case let .IntegerFlag(value):
                        try value.encode(to: encoder)
                    case let .FloatFlag(value):
                        try value.encode(to: encoder)
                    case let .ObjectFlag(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/evaluationSuccess/value2`.
            package var value2: Components.Schemas.EvaluationSuccess.Value2Payload
            /// Creates a new `EvaluationSuccess`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            package init(
                value1: Components.Schemas.EvaluationSuccess.Value1Payload,
                value2: Components.Schemas.EvaluationSuccess.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            package init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            package func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// Flag evaluation failure response
        ///
        /// - Remark: Generated from `#/components/schemas/evaluationFailure`.
        package struct EvaluationFailure: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/evaluationFailure/key`.
            package var key: Components.Schemas.Key
            /// OpenFeature compatible error code. See https://openfeature.dev/specification/types#error-code
            ///
            /// - Remark: Generated from `#/components/schemas/evaluationFailure/errorCode`.
            @frozen package enum ErrorCodePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case parseError = "PARSE_ERROR"
                case targetingKeyMissing = "TARGETING_KEY_MISSING"
                case invalidContext = "INVALID_CONTEXT"
                case general = "GENERAL"
            }
            /// OpenFeature compatible error code. See https://openfeature.dev/specification/types#error-code
            ///
            /// - Remark: Generated from `#/components/schemas/evaluationFailure/errorCode`.
            package var errorCode: Components.Schemas.EvaluationFailure.ErrorCodePayload
            /// - Remark: Generated from `#/components/schemas/evaluationFailure/errorDetails`.
            package var errorDetails: Components.Schemas.ErrorDetails?
            /// Creates a new `EvaluationFailure`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - errorCode: OpenFeature compatible error code. See https://openfeature.dev/specification/types#error-code
            ///   - errorDetails:
            package init(
                key: Components.Schemas.Key,
                errorCode: Components.Schemas.EvaluationFailure.ErrorCodePayload,
                errorDetails: Components.Schemas.ErrorDetails? = nil
            ) {
                self.key = key
                self.errorCode = errorCode
                self.errorDetails = errorDetails
            }
            package enum CodingKeys: String, CodingKey {
                case key
                case errorCode
                case errorDetails
            }
        }
        /// Flag not found response
        ///
        /// - Remark: Generated from `#/components/schemas/flagNotFound`.
        package struct FlagNotFound: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/flagNotFound/key`.
            package var key: Components.Schemas.Key
            /// - Remark: Generated from `#/components/schemas/flagNotFound/errorCode`.
            @frozen package enum ErrorCodePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case flagNotFound = "FLAG_NOT_FOUND"
            }
            /// - Remark: Generated from `#/components/schemas/flagNotFound/errorCode`.
            package var errorCode: Components.Schemas.FlagNotFound.ErrorCodePayload
            /// - Remark: Generated from `#/components/schemas/flagNotFound/errorDetails`.
            package var errorDetails: Components.Schemas.ErrorDetails?
            /// Creates a new `FlagNotFound`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - errorCode:
            ///   - errorDetails:
            package init(
                key: Components.Schemas.Key,
                errorCode: Components.Schemas.FlagNotFound.ErrorCodePayload,
                errorDetails: Components.Schemas.ErrorDetails? = nil
            ) {
                self.key = key
                self.errorCode = errorCode
                self.errorDetails = errorDetails
            }
            package enum CodingKeys: String, CodingKey {
                case key
                case errorCode
                case errorDetails
            }
        }
        /// A general error response from the service
        ///
        /// - Remark: Generated from `#/components/schemas/generalErrorResponse`.
        package struct GeneralErrorResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/generalErrorResponse/errorDetails`.
            package var errorDetails: Components.Schemas.ErrorDetails?
            /// Creates a new `GeneralErrorResponse`.
            ///
            /// - Parameters:
            ///   - errorDetails:
            package init(errorDetails: Components.Schemas.ErrorDetails? = nil) {
                self.errorDetails = errorDetails
            }
            package enum CodingKeys: String, CodingKey {
                case errorDetails
            }
        }
        /// Feature flag key
        ///
        /// - Remark: Generated from `#/components/schemas/key`.
        package typealias Key = Swift.String
        /// Context information for flag evaluation
        ///
        /// - Remark: Generated from `#/components/schemas/context`.
        package struct Context: Codable, Hashable, Sendable {
            /// A string logically identifying the subject of evaluation (end-user, service, etc).
            ///
            /// - Remark: Generated from `#/components/schemas/context/targetingKey`.
            package var targetingKey: Swift.String?
            /// A container of undocumented properties.
            package var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `Context`.
            ///
            /// - Parameters:
            ///   - targetingKey: A string logically identifying the subject of evaluation (end-user, service, etc).
            ///   - additionalProperties: A container of undocumented properties.
            package init(
                targetingKey: Swift.String? = nil,
                additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
            ) {
                self.targetingKey = targetingKey
                self.additionalProperties = additionalProperties
            }
            package enum CodingKeys: String, CodingKey {
                case targetingKey
            }
            package init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.targetingKey = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .targetingKey
                )
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                    "targetingKey"
                ])
            }
            package func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encodeIfPresent(
                    self.targetingKey,
                    forKey: .targetingKey
                )
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// A boolean typed flag value
        ///
        /// - Remark: Generated from `#/components/schemas/booleanFlag`.
        package struct BooleanFlag: Codable, Hashable, Sendable {
            /// Flag evaluation result
            ///
            /// - Remark: Generated from `#/components/schemas/booleanFlag/value`.
            package var value: Swift.Bool
            /// Creates a new `BooleanFlag`.
            ///
            /// - Parameters:
            ///   - value: Flag evaluation result
            package init(value: Swift.Bool) {
                self.value = value
            }
            package enum CodingKeys: String, CodingKey {
                case value
            }
        }
        /// A string typed flag value
        ///
        /// - Remark: Generated from `#/components/schemas/stringFlag`.
        package struct StringFlag: Codable, Hashable, Sendable {
            /// Flag evaluation result
            ///
            /// - Remark: Generated from `#/components/schemas/stringFlag/value`.
            package var value: Swift.String
            /// Creates a new `StringFlag`.
            ///
            /// - Parameters:
            ///   - value: Flag evaluation result
            package init(value: Swift.String) {
                self.value = value
            }
            package enum CodingKeys: String, CodingKey {
                case value
            }
        }
        /// An integer typed flag value
        ///
        /// - Remark: Generated from `#/components/schemas/integerFlag`.
        package struct IntegerFlag: Codable, Hashable, Sendable {
            /// Flag evaluation result
            ///
            /// - Remark: Generated from `#/components/schemas/integerFlag/value`.
            package var value: Swift.Int
            /// Creates a new `IntegerFlag`.
            ///
            /// - Parameters:
            ///   - value: Flag evaluation result
            package init(value: Swift.Int) {
                self.value = value
            }
            package enum CodingKeys: String, CodingKey {
                case value
            }
        }
        /// A float typed flag value
        ///
        /// - Remark: Generated from `#/components/schemas/floatFlag`.
        package struct FloatFlag: Codable, Hashable, Sendable {
            /// Flag evaluation result
            ///
            /// - Remark: Generated from `#/components/schemas/floatFlag/value`.
            package var value: Swift.Double
            /// Creates a new `FloatFlag`.
            ///
            /// - Parameters:
            ///   - value: Flag evaluation result
            package init(value: Swift.Double) {
                self.value = value
            }
            package enum CodingKeys: String, CodingKey {
                case value
            }
        }
        /// An object typed flag value
        ///
        /// - Remark: Generated from `#/components/schemas/objectFlag`.
        package struct ObjectFlag: Codable, Hashable, Sendable {
            /// Flag evaluation result
            ///
            /// - Remark: Generated from `#/components/schemas/objectFlag/value`.
            package var value: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `ObjectFlag`.
            ///
            /// - Parameters:
            ///   - value: Flag evaluation result
            package init(value: OpenAPIRuntime.OpenAPIObjectContainer) {
                self.value = value
            }
            package enum CodingKeys: String, CodingKey {
                case value
            }
        }
        /// An error description for logging or other needs
        ///
        /// - Remark: Generated from `#/components/schemas/errorDetails`.
        package typealias ErrorDetails = Swift.String
        /// OFREP metadata response
        ///
        /// - Remark: Generated from `#/components/schemas/configurationResponse`.
        package struct ConfigurationResponse: Codable, Hashable, Sendable {
            /// name of the flag management system
            ///
            /// - Remark: Generated from `#/components/schemas/configurationResponse/name`.
            package var name: Swift.String?
            /// Capabilities of the flag management system and how to configure them in the provider.
            ///
            /// - Remark: Generated from `#/components/schemas/configurationResponse/capabilities`.
            package struct CapabilitiesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/configurationResponse/capabilities/cacheInvalidation`.
                package var cacheInvalidation: Components.Schemas.FeatureCacheInvalidation?
                /// - Remark: Generated from `#/components/schemas/configurationResponse/capabilities/flagEvaluation`.
                package var flagEvaluation: Components.Schemas.FlagEvaluation?
                /// - Remark: Generated from `#/components/schemas/configurationResponse/capabilities/caching`.
                package var caching: Components.Schemas.FeatureCaching?
                /// Creates a new `CapabilitiesPayload`.
                ///
                /// - Parameters:
                ///   - cacheInvalidation:
                ///   - flagEvaluation:
                ///   - caching:
                package init(
                    cacheInvalidation: Components.Schemas.FeatureCacheInvalidation? = nil,
                    flagEvaluation: Components.Schemas.FlagEvaluation? = nil,
                    caching: Components.Schemas.FeatureCaching? = nil
                ) {
                    self.cacheInvalidation = cacheInvalidation
                    self.flagEvaluation = flagEvaluation
                    self.caching = caching
                }
                package enum CodingKeys: String, CodingKey {
                    case cacheInvalidation
                    case flagEvaluation
                    case caching
                }
            }
            /// Capabilities of the flag management system and how to configure them in the provider.
            ///
            /// - Remark: Generated from `#/components/schemas/configurationResponse/capabilities`.
            package var capabilities: Components.Schemas.ConfigurationResponse.CapabilitiesPayload?
            /// Creates a new `ConfigurationResponse`.
            ///
            /// - Parameters:
            ///   - name: name of the flag management system
            ///   - capabilities: Capabilities of the flag management system and how to configure them in the provider.
            package init(
                name: Swift.String? = nil,
                capabilities: Components.Schemas.ConfigurationResponse.CapabilitiesPayload? = nil
            ) {
                self.name = name
                self.capabilities = capabilities
            }
            package enum CodingKeys: String, CodingKey {
                case name
                case capabilities
            }
        }
        /// Configurations specific for flag evaluations in OFREP provider implementation
        ///
        /// - Remark: Generated from `#/components/schemas/flagEvaluation`.
        package struct FlagEvaluation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/flagEvaluation/SupportedTypesPayload`.
            @frozen package enum SupportedTypesPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case int = "int"
                case float = "float"
                case string = "string"
                case boolean = "boolean"
                case object = "object"
            }
            /// Evaluating a flag of unlisted type through the OFREP provider will result in an error and yield the default value.
            /// However, when supportedTypes is undefined/empty, provider assumes that all flag evaluation types are supported by the flag management system
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/flagEvaluation/supportedTypes`.
            package typealias SupportedTypesPayload = [Components.Schemas.FlagEvaluation.SupportedTypesPayloadPayload]
            /// Evaluating a flag of unlisted type through the OFREP provider will result in an error and yield the default value.
            /// However, when supportedTypes is undefined/empty, provider assumes that all flag evaluation types are supported by the flag management system
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/flagEvaluation/supportedTypes`.
            package var supportedTypes: Components.Schemas.FlagEvaluation.SupportedTypesPayload?
            /// Creates a new `FlagEvaluation`.
            ///
            /// - Parameters:
            ///   - supportedTypes: Evaluating a flag of unlisted type through the OFREP provider will result in an error and yield the default value.
            package init(supportedTypes: Components.Schemas.FlagEvaluation.SupportedTypesPayload? = nil) {
                self.supportedTypes = supportedTypes
            }
            package enum CodingKeys: String, CodingKey {
                case supportedTypes
            }
        }
        /// Configuration for the cache cacheInvalidation
        ///
        /// - Remark: Generated from `#/components/schemas/featureCacheInvalidation`.
        package struct FeatureCacheInvalidation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/featureCacheInvalidation/polling`.
            package var polling: Components.Schemas.FeatureCacheInvalidationPolling?
            /// Creates a new `FeatureCacheInvalidation`.
            ///
            /// - Parameters:
            ///   - polling:
            package init(polling: Components.Schemas.FeatureCacheInvalidationPolling? = nil) {
                self.polling = polling
            }
            package enum CodingKeys: String, CodingKey {
                case polling
            }
        }
        /// Configuration of the polling for the featureCacheInvalidation
        ///
        /// - Remark: Generated from `#/components/schemas/featureCacheInvalidationPolling`.
        package struct FeatureCacheInvalidationPolling: Codable, Hashable, Sendable {
            /// set to true if the remote flag management system is supporting polling
            ///
            /// - Remark: Generated from `#/components/schemas/featureCacheInvalidationPolling/enabled`.
            package var enabled: Swift.Bool?
            /// Minimum polling interval (in millisecond) supported by the flag management system.  
            /// The provider should ensure not to set any polling value under this minimum.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/featureCacheInvalidationPolling/minPollingIntervalMs`.
            package var minPollingIntervalMs: Swift.Double?
            /// Creates a new `FeatureCacheInvalidationPolling`.
            ///
            /// - Parameters:
            ///   - enabled: set to true if the remote flag management system is supporting polling
            ///   - minPollingIntervalMs: Minimum polling interval (in millisecond) supported by the flag management system.  
            package init(
                enabled: Swift.Bool? = nil,
                minPollingIntervalMs: Swift.Double? = nil
            ) {
                self.enabled = enabled
                self.minPollingIntervalMs = minPollingIntervalMs
            }
            package enum CodingKeys: String, CodingKey {
                case enabled
                case minPollingIntervalMs
            }
        }
        /// Configuration of the caching mechanism in the provider (used by server providers)
        ///
        /// - Remark: Generated from `#/components/schemas/featureCaching`.
        package struct FeatureCaching: Codable, Hashable, Sendable {
            /// set to true if you want the provider to cache the evaluation results
            ///
            /// - Remark: Generated from `#/components/schemas/featureCaching/enabled`.
            package var enabled: Swift.Bool?
            /// number (in millisecond) to wait before invalidating the cache. If we have cacheInvalidation enabled, the cache can also be evicted if a configuration change happen.
            ///
            /// - Remark: Generated from `#/components/schemas/featureCaching/ttl`.
            package var ttl: Swift.Double?
            /// Creates a new `FeatureCaching`.
            ///
            /// - Parameters:
            ///   - enabled: set to true if you want the provider to cache the evaluation results
            ///   - ttl: number (in millisecond) to wait before invalidating the cache. If we have cacheInvalidation enabled, the cache can also be evicted if a configuration change happen.
            package init(
                enabled: Swift.Bool? = nil,
                ttl: Swift.Double? = nil
            ) {
                self.enabled = enabled
                self.ttl = ttl
            }
            package enum CodingKeys: String, CodingKey {
                case enabled
                case ttl
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    package enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    package enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    package enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    package enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
package enum Operations {
    /// OFREP single flag evaluation contract
    ///
    /// OFREP single flag evaluation request.
    /// The endpoint is called by the server providers to perform single flag evaluation.
    ///
    ///
    /// - Remark: HTTP `POST /ofrep/v1/evaluate/flags/{key}`.
    /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/{key}/post`.
    package enum PostOfrepV1EvaluateFlagsKey {
        package static let id: Swift.String = "post/ofrep/v1/evaluate/flags/{key}"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/{key}/POST/path`.
            package struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/{key}/POST/path/key`.
                package var key: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - key:
                package init(key: Swift.String) {
                    self.key = key
                }
            }
            package var path: Operations.PostOfrepV1EvaluateFlagsKey.Input.Path
            /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/{key}/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostOfrepV1EvaluateFlagsKey.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostOfrepV1EvaluateFlagsKey.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.PostOfrepV1EvaluateFlagsKey.Input.Headers
            /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/{key}/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/{key}/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.EvaluationRequest)
            }
            package var body: Operations.PostOfrepV1EvaluateFlagsKey.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.PostOfrepV1EvaluateFlagsKey.Input.Path,
                headers: Operations.PostOfrepV1EvaluateFlagsKey.Input.Headers = .init(),
                body: Operations.PostOfrepV1EvaluateFlagsKey.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/{key}/POST/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/{key}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ServerEvaluationSuccess)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ServerEvaluationSuccess {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PostOfrepV1EvaluateFlagsKey.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PostOfrepV1EvaluateFlagsKey.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OFREP successful evaluation response
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/{key}/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostOfrepV1EvaluateFlagsKey.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.PostOfrepV1EvaluateFlagsKey.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/{key}/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/{key}/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.EvaluationFailure)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.EvaluationFailure {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PostOfrepV1EvaluateFlagsKey.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PostOfrepV1EvaluateFlagsKey.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Bad evaluation request
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/{key}/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.PostOfrepV1EvaluateFlagsKey.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.PostOfrepV1EvaluateFlagsKey.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/{key}/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/{key}/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.FlagNotFound)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.FlagNotFound {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PostOfrepV1EvaluateFlagsKey.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PostOfrepV1EvaluateFlagsKey.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Flag not found
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/{key}/post/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.PostOfrepV1EvaluateFlagsKey.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.PostOfrepV1EvaluateFlagsKey.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                package init() {}
            }
            /// Unauthorized - You need credentials to access the API
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/{key}/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.PostOfrepV1EvaluateFlagsKey.Output.Unauthorized)
            /// Unauthorized - You need credentials to access the API
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/{key}/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            package static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.PostOfrepV1EvaluateFlagsKey.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// Creates a new `Forbidden`.
                package init() {}
            }
            /// Forbidden - You are not authorized to access the API
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/{key}/post/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.PostOfrepV1EvaluateFlagsKey.Output.Forbidden)
            /// Forbidden - You are not authorized to access the API
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/{key}/post/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            package static var forbidden: Self {
                .forbidden(.init())
            }
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.PostOfrepV1EvaluateFlagsKey.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/{key}/POST/responses/429/headers`.
                package struct Headers: Sendable, Hashable {
                    /// Indicates when to retry the request again
                    ///
                    /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/{key}/POST/responses/429/headers/Retry-After`.
                    package var retryAfter: Foundation.Date?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - retryAfter: Indicates when to retry the request again
                    package init(retryAfter: Foundation.Date? = nil) {
                        self.retryAfter = retryAfter
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.PostOfrepV1EvaluateFlagsKey.Output.TooManyRequests.Headers
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                package init(headers: Operations.PostOfrepV1EvaluateFlagsKey.Output.TooManyRequests.Headers = .init()) {
                    self.headers = headers
                }
            }
            /// Rate limit reached on the Flag Management System
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/{key}/post/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.PostOfrepV1EvaluateFlagsKey.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            package var tooManyRequests: Operations.PostOfrepV1EvaluateFlagsKey.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/{key}/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/{key}/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.GeneralErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.GeneralErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PostOfrepV1EvaluateFlagsKey.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PostOfrepV1EvaluateFlagsKey.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/{key}/post/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.PostOfrepV1EvaluateFlagsKey.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.PostOfrepV1EvaluateFlagsKey.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// OFREP bulk flag evaluation contract
    ///
    /// OFREP bulk evaluation request.
    /// The endpoint is called by the client providers to evaluate all flags at once.
    ///
    ///
    /// - Remark: HTTP `POST /ofrep/v1/evaluate/flags`.
    /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/post`.
    package enum PostOfrepV1EvaluateFlags {
        package static let id: Swift.String = "post/ofrep/v1/evaluate/flags"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/POST/header`.
            package struct Headers: Sendable, Hashable {
                /// The request will be processed only if ETag doesn't match any of the values listed.
                ///
                /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/POST/header/If-None-Match`.
                package var ifNoneMatch: Swift.String?
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostOfrepV1EvaluateFlags.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - ifNoneMatch: The request will be processed only if ETag doesn't match any of the values listed.
                ///   - accept:
                package init(
                    ifNoneMatch: Swift.String? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostOfrepV1EvaluateFlags.AcceptableContentType>] = .defaultValues()
                ) {
                    self.ifNoneMatch = ifNoneMatch
                    self.accept = accept
                }
            }
            package var headers: Operations.PostOfrepV1EvaluateFlags.Input.Headers
            /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.BulkEvaluationRequest)
            }
            package var body: Operations.PostOfrepV1EvaluateFlags.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            package init(
                headers: Operations.PostOfrepV1EvaluateFlags.Input.Headers = .init(),
                body: Operations.PostOfrepV1EvaluateFlags.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/POST/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// Entity tag used for cache validation
                    ///
                    /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/POST/responses/200/headers/ETag`.
                    package var eTag: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - eTag: Entity tag used for cache validation
                    package init(eTag: Swift.String? = nil) {
                        self.eTag = eTag
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.PostOfrepV1EvaluateFlags.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/POST/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BulkEvaluationSuccess)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.BulkEvaluationSuccess {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PostOfrepV1EvaluateFlags.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.PostOfrepV1EvaluateFlags.Output.Ok.Headers = .init(),
                    body: Operations.PostOfrepV1EvaluateFlags.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// OFREP successful evaluation response
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostOfrepV1EvaluateFlags.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.PostOfrepV1EvaluateFlags.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotModified: Sendable, Hashable {
                /// Creates a new `NotModified`.
                package init() {}
            }
            /// Bulk evaluation is not modified
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/post/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Operations.PostOfrepV1EvaluateFlags.Output.NotModified)
            /// Bulk evaluation is not modified
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/post/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Operations.PostOfrepV1EvaluateFlags.Output.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            package struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/POST/responses/400/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.BulkEvaluationFailure)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.BulkEvaluationFailure {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PostOfrepV1EvaluateFlags.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PostOfrepV1EvaluateFlags.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Bad evaluation request
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.PostOfrepV1EvaluateFlags.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Operations.PostOfrepV1EvaluateFlags.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                package init() {}
            }
            /// Unauthorized - You need credentials to access the API
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.PostOfrepV1EvaluateFlags.Output.Unauthorized)
            /// Unauthorized - You need credentials to access the API
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            package static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.PostOfrepV1EvaluateFlags.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// Creates a new `Forbidden`.
                package init() {}
            }
            /// Forbidden - You are not authorized to access the API
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/post/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.PostOfrepV1EvaluateFlags.Output.Forbidden)
            /// Forbidden - You are not authorized to access the API
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/post/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            package static var forbidden: Self {
                .forbidden(.init())
            }
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.PostOfrepV1EvaluateFlags.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/POST/responses/429/headers`.
                package struct Headers: Sendable, Hashable {
                    /// Indicates when to retry the request again
                    ///
                    /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/POST/responses/429/headers/Retry-After`.
                    package var retryAfter: Foundation.Date?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - retryAfter: Indicates when to retry the request again
                    package init(retryAfter: Foundation.Date? = nil) {
                        self.retryAfter = retryAfter
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.PostOfrepV1EvaluateFlags.Output.TooManyRequests.Headers
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                package init(headers: Operations.PostOfrepV1EvaluateFlags.Output.TooManyRequests.Headers = .init()) {
                    self.headers = headers
                }
            }
            /// Rate limit reached on the Flag Management System
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/post/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.PostOfrepV1EvaluateFlags.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            package var tooManyRequests: Operations.PostOfrepV1EvaluateFlags.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/POST/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/ofrep/v1/evaluate/flags/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.GeneralErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.GeneralErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PostOfrepV1EvaluateFlags.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PostOfrepV1EvaluateFlags.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/evaluate/flags/post/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.PostOfrepV1EvaluateFlags.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.PostOfrepV1EvaluateFlags.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// OFREP provider configuration
    ///
    /// OFREP configuration is used to supply information about the remote flag management system and to set up the OpenFeature SDK providers.
    /// The providers will contact this endpoint only if the client has opted in.
    ///
    ///
    /// - Remark: HTTP `GET /ofrep/v1/configuration`.
    /// - Remark: Generated from `#/paths//ofrep/v1/configuration/get`.
    package enum GetOfrepV1Configuration {
        package static let id: Swift.String = "get/ofrep/v1/configuration"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/ofrep/v1/configuration/GET/header`.
            package struct Headers: Sendable, Hashable {
                /// The request will be processed only if ETag doesn't match any of the values listed.
                ///
                /// - Remark: Generated from `#/paths/ofrep/v1/configuration/GET/header/If-None-Match`.
                package var ifNoneMatch: Swift.String?
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetOfrepV1Configuration.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - ifNoneMatch: The request will be processed only if ETag doesn't match any of the values listed.
                ///   - accept:
                package init(
                    ifNoneMatch: Swift.String? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetOfrepV1Configuration.AcceptableContentType>] = .defaultValues()
                ) {
                    self.ifNoneMatch = ifNoneMatch
                    self.accept = accept
                }
            }
            package var headers: Operations.GetOfrepV1Configuration.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            package init(headers: Operations.GetOfrepV1Configuration.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ofrep/v1/configuration/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// Entity tag used for cache validation
                    ///
                    /// - Remark: Generated from `#/paths/ofrep/v1/configuration/GET/responses/200/headers/ETag`.
                    package var eTag: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - eTag: Entity tag used for cache validation
                    package init(eTag: Swift.String? = nil) {
                        self.eTag = eTag
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.GetOfrepV1Configuration.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/ofrep/v1/configuration/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/ofrep/v1/configuration/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ConfigurationResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ConfigurationResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.GetOfrepV1Configuration.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.GetOfrepV1Configuration.Output.Ok.Headers = .init(),
                    body: Operations.GetOfrepV1Configuration.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// OFREP metadata response
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/configuration/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetOfrepV1Configuration.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.GetOfrepV1Configuration.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NotModified: Sendable, Hashable {
                /// Creates a new `NotModified`.
                package init() {}
            }
            /// Flag Management System Metadata is not modified
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/configuration/get/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Operations.GetOfrepV1Configuration.Output.NotModified)
            /// Flag Management System Metadata is not modified
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/configuration/get/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Operations.GetOfrepV1Configuration.Output.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            package struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                package init() {}
            }
            /// Unauthorized - You need credentials to access the API
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/configuration/get/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.GetOfrepV1Configuration.Output.Unauthorized)
            /// Unauthorized - You need credentials to access the API
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/configuration/get/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            package static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Operations.GetOfrepV1Configuration.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// Creates a new `Forbidden`.
                package init() {}
            }
            /// Forbidden - You are not authorized to access the API
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/configuration/get/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.GetOfrepV1Configuration.Output.Forbidden)
            /// Forbidden - You are not authorized to access the API
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/configuration/get/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            package static var forbidden: Self {
                .forbidden(.init())
            }
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.GetOfrepV1Configuration.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            package struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ofrep/v1/configuration/GET/responses/500/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/ofrep/v1/configuration/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.GeneralErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.GeneralErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.GetOfrepV1Configuration.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.GetOfrepV1Configuration.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//ofrep/v1/configuration/get/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.GetOfrepV1Configuration.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Operations.GetOfrepV1Configuration.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
